# Usage
This simple Java Project is ready for Continuous Integration (CI).

The application can simply be packaged without and with dependencies.
The default main class of the manifest is defined (see pom.xml).
```console
# Compile, run unit and integration tests (the shade plugin generate two artifacts) and package.
mvn verify
# Execution from Maven
mvn exec:java
# Execution as a uber jar
java -jar target/myapp-${project.version}-withdependencies.jar
```

Activate git versioning. A default Java .gitignore is already included.
```console
git init
git add .
git commit -m "Initial release."
```

You can create a github repository with the official [CLI](https://github.com/cli/cli)
and add an empty branch gh-pages for the projet website on github.

```console
gh repo create \
    --confirm \
    --enable-wiki=false \
    --description "A simple CI Java Application" \
    --private \
    --homepage https://ebpro.github.io/${project.artifactId}/README.html

git push --set-upstream origin master
```

to create an empty gh-pages branch, clones the repository ** somewhere else ** and :
```console
# create gh-pages branch
git checkout --orphan gh-pages
git rm -rf .
touch README.md
git add README.md
git commit -m 'initial gh-pages commit'
git push origin gh-pages
```

The gitflow workflow can be used to manage branches and maven artifacts version :

start a feature (see the version in the pom.xml and in the uber jar name):
```console
mvn -DallowSnapshots=true -DfeatureName=myfeature1 jgitflow:feature-start
mvn package
```

back to develop branch
```console
git checkout develop
```

start another feature
```console
mvn -DallowSnapshots=true -DfeatureName=myfeature1 jgitflow:feature-start
```

```console
mvn -DallowSnapshots=true jgitflow:feature-finish

mvn -DallowSnapshots=true jgitflow:release-start
mvn -DallowSnapshots=true jgitflow:release-fin
```

Artifacts can automatically be deployed to Github packages.
```console
mvn deploy
```

A website can be automatically generated
```console
mvn site
```

The website can displayed in a local web server
```console
mvn site:run
```

The website can be deployed to github pages.
```console
mvn conpile
mvn site-deploy
```